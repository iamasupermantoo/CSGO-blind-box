{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\views\\apps\\todo\\Todo.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\views\\apps\\todo\\Todo.vue","mtime":1620826038000},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1664268237683},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\babel-loader\\lib\\index.js","mtime":1663908471338},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1664268237964}],"contextDependencies":[],"result":["\r\nimport moduleTodo          from '@/store/todo/moduleTodo.js'\r\nimport TodoAddNew          from './TodoAddNew.vue'\r\nimport TodoTask            from './TodoTask.vue'\r\nimport TodoFilters         from './TodoFilters.vue'\r\nimport TodoEdit            from './TodoEdit.vue'\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      currFilter           : '',\r\n      clickNotClose        : true,\r\n      displayPrompt        : false,\r\n      taskIdToEdit         : 0,\r\n      isSidebarActive      : true,\r\n      settings : {\r\n        maxScrollbarLength : 60,\r\n        wheelSpeed         : 0.30\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    todoFilter () {\r\n      const scroll_el = this.$refs.taskListPS.$el || this.$refs.taskListPS\r\n      scroll_el.scrollTop = 0\r\n\r\n      this.toggleTodoSidebar()\r\n\r\n      // Fetch Tasks\r\n      const filter = this.$route.params.filter\r\n      this.$store.dispatch('todo/fetchTasks', { filter })\r\n      this.$store.commit('todo/UPDATE_TODO_FILTER', filter)\r\n    },\r\n    windowWidth () {\r\n      this.setSidebarWidth()\r\n    }\r\n  },\r\n  computed: {\r\n    todo ()         { return this.$store.state.todo.todoArray              },\r\n    todoFilter ()   { return this.$route.params.filter                     },\r\n    taskList ()     { return this.$store.getters['todo/queriedTasks']      },\r\n    searchQuery:   {\r\n      get ()        { return this.$store.state.todo.todoSearchQuery        },\r\n      set (val)     { this.$store.dispatch('todo/setTodoSearchQuery', val) }\r\n    },\r\n    scrollbarTag () { return this.$store.getters.scrollbarTag              },\r\n    windowWidth ()  { return this.$store.state.windowWidth                 }\r\n  },\r\n  methods: {\r\n    showDisplayPrompt (itemId) {\r\n      this.taskIdToEdit  = itemId\r\n      this.displayPrompt = true\r\n    },\r\n    hidePrompt () {\r\n      this.displayPrompt = false\r\n    },\r\n    setSidebarWidth () {\r\n      if (this.windowWidth < 992) {\r\n        this.isSidebarActive = this.clickNotClose = false\r\n      } else {\r\n        this.isSidebarActive = this.clickNotClose = true\r\n      }\r\n    },\r\n    toggleTodoSidebar (value = false) {\r\n      if (!value && this.clickNotClose) return\r\n      this.isSidebarActive = value\r\n    }\r\n  },\r\n  components: {\r\n    TodoAddNew,\r\n    TodoTask,\r\n    TodoFilters,\r\n    TodoEdit,\r\n    VuePerfectScrollbar\r\n  },\r\n  created () {\r\n    this.$store.registerModule('todo', moduleTodo)\r\n    this.setSidebarWidth()\r\n\r\n    const filter = this.$route.params.filter\r\n\r\n    // Fetch Tasks\r\n    this.$store.dispatch('todo/fetchTasks', { filter })\r\n    this.$store.commit('todo/UPDATE_TODO_FILTER', filter)\r\n\r\n    // Fetch Tags\r\n    this.$store.dispatch('todo/fetchTags')\r\n  },\r\n  beforeUpdate () {\r\n    this.currFilter = this.$route.params.filter\r\n  },\r\n  beforeDestroy () {\r\n    this.$store.unregisterModule('todo')\r\n  },\r\n  mounted () {\r\n    this.$store.dispatch('todo/setTodoSearchQuery', '')\r\n  }\r\n}\r\n\r\n",{"version":3,"sources":["Todo.vue"],"names":[],"mappings":";AA4DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Todo.vue","sourceRoot":"src/views/apps/todo","sourcesContent":["<!-- =========================================================================================\r\n  File Name: Todo.vue\r\n  Description: Todo Application to keep you ahead of time\r\n  ----------------------------------------------------------------------------------------\r\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n    Author: Pixinvent\r\n  Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n    <div id=\"todo-app\" class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\">\r\n        <vs-sidebar class=\"items-no-padding\" parent=\"#todo-app\" :click-not-close=\"clickNotClose\" :hidden-background=\"clickNotClose\" v-model=\"isSidebarActive\">\r\n\r\n            <todo-add-new />\r\n\r\n            <component :is=\"scrollbarTag\" class=\"todo-scroll-area\" :settings=\"settings\" :key=\"$vs.rtl\">\r\n                <todo-filters @closeSidebar=\"toggleTodoSidebar\"></todo-filters>\r\n            </component>\r\n\r\n        </vs-sidebar>\r\n        <div :class=\"{'sidebar-spacer': clickNotClose}\" class=\"no-scroll-content border border-r-0 border-b-0 border-t-0 border-solid d-theme-border-grey-light no-scroll-content\">\r\n\r\n            <div class=\"flex d-theme-dark-bg items-center border border-l-0 border-r-0 border-t-0 border-solid d-theme-border-grey-light\">\r\n\r\n                <!-- TOGGLE SIDEBAR BUTTON -->\r\n                <feather-icon class=\"md:inline-flex lg:hidden ml-4 mr-4 cursor-pointer\" icon=\"MenuIcon\" @click.stop=\"toggleTodoSidebar(true)\" />\r\n\r\n                <!-- SEARCH BAR -->\r\n                <vs-input icon-no-border size=\"large\" icon-pack=\"feather\" icon=\"icon-search\" placeholder=\"Search...\" v-model=\"searchQuery\" class=\"vs-input-no-border vs-input-no-shdow-focus w-full\" />\r\n            </div>\r\n\r\n            <!-- TODO LIST -->\r\n            <component :is=\"scrollbarTag\" class=\"todo-content-scroll-area\" :settings=\"settings\" ref=\"taskListPS\" :key=\"$vs.rtl\">\r\n\r\n                <transition-group class=\"todo-list\" name=\"list-enter-up\" tag=\"ul\" appear>\r\n                    <li\r\n                      class=\"cursor-pointer todo_todo-item\"\r\n                      v-for=\"(task, index) in taskList\"\r\n                      :key=\"String(currFilter) + String(task.id)\"\r\n                      :style=\"[{transitionDelay: (index * 0.1) + 's'}]\">\r\n\r\n                      <todo-task :taskId=\"task.id\" @showDisplayPrompt=\"showDisplayPrompt($event)\" :key=\"String(task.title) + String(task.desc)\" />\r\n                        <!--\r\n                        Note: Remove \"todo-task\" component's key just concat lastUpdated field in li key list.\r\n                        e.g. <li class=\"...\" v-for=\"...\" :key=\"String(currFilter) + String(task.id) + String(task.lastUpdated)\" .. >\r\n                        -->\r\n                    </li>\r\n                </transition-group>\r\n            </component>\r\n            <!-- /TODO LIST -->\r\n\r\n        </div>\r\n\r\n        <!-- EDIT TODO DIALOG -->\r\n        <todo-edit :displayPrompt=\"displayPrompt\" :taskId=\"taskIdToEdit\" @hideDisplayPrompt=\"hidePrompt\" v-if=\"displayPrompt\"></todo-edit>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport moduleTodo          from '@/store/todo/moduleTodo.js'\r\nimport TodoAddNew          from './TodoAddNew.vue'\r\nimport TodoTask            from './TodoTask.vue'\r\nimport TodoFilters         from './TodoFilters.vue'\r\nimport TodoEdit            from './TodoEdit.vue'\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      currFilter           : '',\r\n      clickNotClose        : true,\r\n      displayPrompt        : false,\r\n      taskIdToEdit         : 0,\r\n      isSidebarActive      : true,\r\n      settings : {\r\n        maxScrollbarLength : 60,\r\n        wheelSpeed         : 0.30\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    todoFilter () {\r\n      const scroll_el = this.$refs.taskListPS.$el || this.$refs.taskListPS\r\n      scroll_el.scrollTop = 0\r\n\r\n      this.toggleTodoSidebar()\r\n\r\n      // Fetch Tasks\r\n      const filter = this.$route.params.filter\r\n      this.$store.dispatch('todo/fetchTasks', { filter })\r\n      this.$store.commit('todo/UPDATE_TODO_FILTER', filter)\r\n    },\r\n    windowWidth () {\r\n      this.setSidebarWidth()\r\n    }\r\n  },\r\n  computed: {\r\n    todo ()         { return this.$store.state.todo.todoArray              },\r\n    todoFilter ()   { return this.$route.params.filter                     },\r\n    taskList ()     { return this.$store.getters['todo/queriedTasks']      },\r\n    searchQuery:   {\r\n      get ()        { return this.$store.state.todo.todoSearchQuery        },\r\n      set (val)     { this.$store.dispatch('todo/setTodoSearchQuery', val) }\r\n    },\r\n    scrollbarTag () { return this.$store.getters.scrollbarTag              },\r\n    windowWidth ()  { return this.$store.state.windowWidth                 }\r\n  },\r\n  methods: {\r\n    showDisplayPrompt (itemId) {\r\n      this.taskIdToEdit  = itemId\r\n      this.displayPrompt = true\r\n    },\r\n    hidePrompt () {\r\n      this.displayPrompt = false\r\n    },\r\n    setSidebarWidth () {\r\n      if (this.windowWidth < 992) {\r\n        this.isSidebarActive = this.clickNotClose = false\r\n      } else {\r\n        this.isSidebarActive = this.clickNotClose = true\r\n      }\r\n    },\r\n    toggleTodoSidebar (value = false) {\r\n      if (!value && this.clickNotClose) return\r\n      this.isSidebarActive = value\r\n    }\r\n  },\r\n  components: {\r\n    TodoAddNew,\r\n    TodoTask,\r\n    TodoFilters,\r\n    TodoEdit,\r\n    VuePerfectScrollbar\r\n  },\r\n  created () {\r\n    this.$store.registerModule('todo', moduleTodo)\r\n    this.setSidebarWidth()\r\n\r\n    const filter = this.$route.params.filter\r\n\r\n    // Fetch Tasks\r\n    this.$store.dispatch('todo/fetchTasks', { filter })\r\n    this.$store.commit('todo/UPDATE_TODO_FILTER', filter)\r\n\r\n    // Fetch Tags\r\n    this.$store.dispatch('todo/fetchTags')\r\n  },\r\n  beforeUpdate () {\r\n    this.currFilter = this.$route.params.filter\r\n  },\r\n  beforeDestroy () {\r\n    this.$store.unregisterModule('todo')\r\n  },\r\n  mounted () {\r\n    this.$store.dispatch('todo/setTodoSearchQuery', '')\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuexy/apps/todo.scss\";\r\n</style>\r\n"]}]}