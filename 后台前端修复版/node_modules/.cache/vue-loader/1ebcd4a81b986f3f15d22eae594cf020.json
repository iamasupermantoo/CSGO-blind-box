{"remainingRequest":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\layouts\\components\\vertical-nav-menu\\VerticalNavMenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\layouts\\components\\vertical-nav-menu\\VerticalNavMenu.vue","mtime":1620826038000},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\babel-loader\\lib\\index.js","mtime":1663908471338},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1664268237964}],"contextDependencies":[],"result":["\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport VNavMenuGroup from './VerticalNavMenuGroup.vue'\r\nimport VNavMenuItem from './VerticalNavMenuItem.vue'\r\n\r\nimport Logo from '../Logo.vue'\r\n\r\nexport default {\r\n  name: 'v-nav-menu',\r\n  components: {\r\n    VNavMenuGroup,\r\n    VNavMenuItem,\r\n    VuePerfectScrollbar,\r\n    Logo\r\n  },\r\n  props: {\r\n    logo:             { type: String },\r\n    openGroupHover:   { type: Boolean, default: false },\r\n    parent:           { type: String },\r\n    reduceNotRebound: { type: Boolean, default: true },\r\n    navMenuItems:     { type: Array,   required: true },\r\n    title:            { type: String }\r\n  },\r\n  data: () => ({\r\n    clickNotClose       : false, // disable close navMenu on outside click\r\n    isMouseEnter        : false,\r\n    reduce              : false, // determines if navMenu is reduce - component property\r\n    showCloseButton     : false, // show close button in smaller devices\r\n    settings            : {      // perfectScrollbar settings\r\n      maxScrollbarLength: 60,\r\n      wheelSpeed        : 1,\r\n      swipeEasing       : true\r\n    },\r\n    showShadowBottom    : false\r\n  }),\r\n  computed: {\r\n    isGroupActive () {\r\n      return (item) => {\r\n        const path        = this.$route.fullPath\r\n        const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\r\n        let open          = false\r\n\r\n        const func = (item) => {\r\n          if (item.submenu) {\r\n            item.submenu.forEach((item) => {\r\n              if (item.url && (path === item.url || routeParent === item.slug)) { open = true } else if (item.submenu) { func(item) }\r\n            })\r\n          }\r\n        }\r\n        func(item)\r\n        return open\r\n      }\r\n    },\r\n    menuItemsUpdated () {\r\n      const clone = this.navMenuItems.slice()\r\n\r\n      for (const [index, item] of this.navMenuItems.entries()) {\r\n        if (item.header && item.items.length && (index || 1)) {\r\n          const i = clone.findIndex(ix => ix.header === item.header)\r\n          for (const [subIndex, subItem] of item.items.entries()) {\r\n            clone.splice(i + 1 + subIndex, 0, subItem)\r\n          }\r\n        }\r\n      }\r\n\r\n      return clone\r\n    },\r\n    isVerticalNavMenuActive: {\r\n      get ()    { return this.$store.state.isVerticalNavMenuActive },\r\n      set (val) { this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', val) }\r\n    },\r\n    layoutType () { return this.$store.state.mainLayoutType },\r\n    reduceButton: {\r\n      get ()    { return this.$store.state.reduceButton },\r\n      set (val) { this.$store.commit('TOGGLE_REDUCE_BUTTON', val) }\r\n    },\r\n    isVerticalNavMenuReduced () { return Boolean(this.reduce && this.reduceButton) },\r\n    verticalNavMenuItemsMin ()  { return this.$store.state.verticalNavMenuItemsMin },\r\n    scrollbarTag ()             { return this.$store.getters.scrollbarTag          },\r\n    windowWidth ()              { return this.$store.state.windowWidth             }\r\n  },\r\n  watch: {\r\n    '$route' () {\r\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\r\n    },\r\n    reduce (val) {\r\n      const verticalNavMenuWidth = val ? 'reduced' : this.$store.state.windowWidth < 1200 ? 'no-nav-menu' : 'default'\r\n      this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\r\n\r\n      setTimeout(function () {\r\n        window.dispatchEvent(new Event('resize'))\r\n      }, 100)\r\n    },\r\n    layoutType ()   { this.setVerticalNavMenuWidth() },\r\n    reduceButton () { this.setVerticalNavMenuWidth() },\r\n    windowWidth ()  { this.setVerticalNavMenuWidth() }\r\n  },\r\n  methods: {\r\n    onMenuSwipe (event) {\r\n      if (event.direction === 4 && this.$vs.rtl) {\r\n\r\n        // Swipe Right\r\n        if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false\r\n\r\n      } else if (event.direction === 2 && !this.$vs.rtl) {\r\n\r\n        // Swipe Left\r\n        if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false\r\n      }\r\n    },\r\n    onSwipeAreaSwipe (event) {\r\n\r\n      if (event.direction === 4 && !this.$vs.rtl) {\r\n\r\n        // Swipe Right\r\n        if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true\r\n      } else if (event.direction === 2 && this.$vs.rtl) {\r\n\r\n        // Swipe Left\r\n        if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true\r\n      }\r\n    },\r\n    psSectionScroll () {\r\n      const scroll_el = this.$refs.verticalNavMenuPs.$el || this.$refs.verticalNavMenuPs\r\n      this.showShadowBottom = scroll_el.scrollTop > 0\r\n    },\r\n    mouseEnter () {\r\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\r\n      this.isMouseEnter = true\r\n    },\r\n    mouseLeave () {\r\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', true)\r\n      this.isMouseEnter = false\r\n    },\r\n    setVerticalNavMenuWidth () {\r\n\r\n      if (this.windowWidth > 1200) {\r\n        if (this.layoutType === 'vertical') {\r\n\r\n          // Set reduce\r\n          this.reduce = !!this.reduceButton\r\n\r\n          // Open NavMenu\r\n          this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\r\n\r\n          // Set Menu Items Only Icon Mode\r\n          const verticalNavMenuItemsMin = !!(this.reduceButton && !this.isMouseEnter)\r\n          this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\r\n\r\n          // Menu Action buttons\r\n          this.clickNotClose   = true\r\n          this.showCloseButton = false\r\n\r\n          const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? 'reduced' : 'default'\r\n          this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\r\n\r\n          return\r\n        }\r\n      }\r\n\r\n      // Close NavMenu\r\n      this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\r\n\r\n      // Reduce button\r\n      if (this.reduceButton) this.reduce = false\r\n\r\n      // Menu Action buttons\r\n      this.showCloseButton = true\r\n      this.clickNotClose   = false\r\n\r\n      // Update NavMenu Width\r\n      this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\r\n\r\n      // Remove Only Icon in Menu\r\n      this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\r\n\r\n\r\n      // if(this.layoutType === 'vertical' || (this.layoutType === 'horizontal' && this.windowWidth < 1200))\r\n      // if (this.windowWidth < 1200) {\r\n\r\n      //   // Close NavMenu\r\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\r\n\r\n      //   // Reduce button\r\n      //   if (this.reduceButton) this.reduce = false\r\n\r\n      //   // Menu Action buttons\r\n      //   this.showCloseButton = true\r\n      //   this.clickNotClose   = false\r\n\r\n      //   // Update NavMenu Width\r\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\r\n\r\n      //   // Remove Only Icon in Menu\r\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\r\n\r\n      // } else {\r\n\r\n      //   // Set reduce\r\n      //   this.reduce = this.reduceButton ? true : false\r\n\r\n      //   // Open NavMenu\r\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\r\n\r\n      //   // Set Menu Items Only Icon Mode\r\n      //   const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\r\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\r\n\r\n      //   // Menu Action buttons\r\n      //   this.clickNotClose   = true\r\n      //   this.showCloseButton = false\r\n\r\n      //   const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\r\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\r\n      // }\r\n    },\r\n    toggleReduce (val) {\r\n      this.reduceButton = val\r\n      this.setVerticalNavMenuWidth()\r\n    }\r\n  },\r\n  mounted () {\r\n    this.setVerticalNavMenuWidth()\r\n  }\r\n}\r\n\r\n",{"version":3,"sources":["VerticalNavMenu.vue"],"names":[],"mappings":";AAofile":"VerticalNavMenu.vue","sourceRoot":"src/layouts/components/vertical-nav-menu","sourcesContent":["<!-- =========================================================================================\r\n  File Name: VerticalNavMenu.vue\r\n  Description: Vertical NavMenu Component\r\n  Component Name: VerticalNavMenu\r\n  ----------------------------------------------------------------------------------------\r\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n    Author: Pixinvent\r\n  Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n  <div class=\"parentx\">\r\n\r\n    <vs-sidebar\r\n      class=\"v-nav-menu items-no-padding\"\r\n      v-model=\"isVerticalNavMenuActive\"\r\n      ref=\"verticalNavMenu\"\r\n      default-index=\"-1\"\r\n      :click-not-close=\"clickNotClose\"\r\n      :reduce-not-rebound=\"reduceNotRebound\"\r\n      :parent=\"parent\"\r\n      :hiddenBackground=\"clickNotClose\"\r\n      :reduce=\"reduce\"\r\n      v-hammer:swipe=\"onMenuSwipe\">\r\n\r\n      <div @mouseenter=\"mouseEnter\" @mouseleave=\"mouseLeave\">\r\n\r\n        <!-- Header -->\r\n        <div class=\"header-sidebar flex items-end justify-between\" slot=\"header\">\r\n\r\n          <!-- Logo -->\r\n          <router-link tag=\"div\" class=\"vx-logo cursor-pointer flex items-center\" to=\"/\">\r\n            <logo class=\"w-10 mr-4 fill-current text-primary\" />\r\n            <span class=\"vx-logo-text text-primary\" v-show=\"isMouseEnter || !reduce\" v-if=\"title\">{{ title }}</span>\r\n          </router-link>\r\n          <!-- /Logo -->\r\n\r\n          <!-- Menu Buttons -->\r\n          <div>\r\n            <!-- Close Button -->\r\n            <template v-if=\"showCloseButton\">\r\n              <feather-icon icon=\"XIcon\" class=\"m-0 cursor-pointer\" @click=\"$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\" />\r\n            </template>\r\n\r\n            <!-- Toggle Buttons -->\r\n            <template v-else-if=\"!showCloseButton && !verticalNavMenuItemsMin\">\r\n              <feather-icon\r\n                id=\"btnVNavMenuMinToggler\"\r\n                class=\"mr-0 cursor-pointer\"\r\n                :icon=\"reduce ? 'CircleIcon' : 'DiscIcon'\"\r\n                svg-classes=\"stroke-current text-primary\"\r\n                @click=\"toggleReduce(!reduce)\" />\r\n            </template>\r\n          </div>\r\n          <!-- /Menu Toggle Buttons -->\r\n        </div>\r\n        <!-- /Header -->\r\n\r\n        <!-- Header Shadow -->\r\n        <div class=\"shadow-bottom\" v-show=\"showShadowBottom\" />\r\n\r\n        <!-- Menu Items -->\r\n        <component :is=\"scrollbarTag\" ref=\"verticalNavMenuPs\" class=\"scroll-area-v-nav-menu pt-2\" :settings=\"settings\" @ps-scroll-y=\"psSectionScroll\" @scroll=\"psSectionScroll\" :key=\"$vs.rtl\">\r\n          <template v-for=\"(item, index) in menuItemsUpdated\">\r\n\r\n            <!-- Group Header -->\r\n            <span v-if=\"item.header && !verticalNavMenuItemsMin\" class=\"navigation-header truncate\" :key=\"`header-${index}`\">\r\n              {{ $t(item.i18n) || item.header }}\r\n            </span>\r\n            <!-- /Group Header -->\r\n\r\n            <template v-else-if=\"!item.header\">\r\n\r\n              <!-- Nav-Item -->\r\n              <v-nav-menu-item\r\n                v-if=\"!item.submenu\"\r\n                :key=\"`item-${index}`\"\r\n                :index=\"index\"\r\n                :to=\"item.slug !== 'external' ? item.url : null\"\r\n                :href=\"item.slug === 'external' ? item.url : null\"\r\n                :icon=\"item.icon\" :target=\"item.target\"\r\n                :isDisabled=\"item.isDisabled\"\r\n                :slug=\"item.slug\">\r\n                  <span v-show=\"!verticalNavMenuItemsMin\" class=\"truncate\">{{ $t(item.i18n) || item.name }}</span>\r\n                  <vs-chip class=\"ml-auto\" :color=\"item.tagColor\" v-if=\"item.tag && (isMouseEnter || !reduce)\">{{ item.tag }}</vs-chip>\r\n              </v-nav-menu-item>\r\n\r\n              <!-- Nav-Group -->\r\n              <template v-else>\r\n                <v-nav-menu-group\r\n                  :key=\"`group-${index}`\"\r\n                  :openHover=\"openGroupHover\"\r\n                  :group=\"item\"\r\n                  :groupIndex=\"index\"\r\n                  :open=\"isGroupActive(item)\" />\r\n              </template>\r\n              <!-- /Nav-Group -->\r\n            </template>\r\n          </template>\r\n        </component>\r\n        <!-- /Menu Items -->\r\n      </div>\r\n    </vs-sidebar>\r\n\r\n    <!-- Swipe Gesture -->\r\n    <div\r\n      v-if=\"!isVerticalNavMenuActive\"\r\n      class=\"v-nav-menu-swipe-area\"\r\n      v-hammer:swipe=\"onSwipeAreaSwipe\" />\r\n    <!-- /Swipe Gesture -->\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport VNavMenuGroup from './VerticalNavMenuGroup.vue'\r\nimport VNavMenuItem from './VerticalNavMenuItem.vue'\r\n\r\nimport Logo from '../Logo.vue'\r\n\r\nexport default {\r\n  name: 'v-nav-menu',\r\n  components: {\r\n    VNavMenuGroup,\r\n    VNavMenuItem,\r\n    VuePerfectScrollbar,\r\n    Logo\r\n  },\r\n  props: {\r\n    logo:             { type: String },\r\n    openGroupHover:   { type: Boolean, default: false },\r\n    parent:           { type: String },\r\n    reduceNotRebound: { type: Boolean, default: true },\r\n    navMenuItems:     { type: Array,   required: true },\r\n    title:            { type: String }\r\n  },\r\n  data: () => ({\r\n    clickNotClose       : false, // disable close navMenu on outside click\r\n    isMouseEnter        : false,\r\n    reduce              : false, // determines if navMenu is reduce - component property\r\n    showCloseButton     : false, // show close button in smaller devices\r\n    settings            : {      // perfectScrollbar settings\r\n      maxScrollbarLength: 60,\r\n      wheelSpeed        : 1,\r\n      swipeEasing       : true\r\n    },\r\n    showShadowBottom    : false\r\n  }),\r\n  computed: {\r\n    isGroupActive () {\r\n      return (item) => {\r\n        const path        = this.$route.fullPath\r\n        const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\r\n        let open          = false\r\n\r\n        const func = (item) => {\r\n          if (item.submenu) {\r\n            item.submenu.forEach((item) => {\r\n              if (item.url && (path === item.url || routeParent === item.slug)) { open = true } else if (item.submenu) { func(item) }\r\n            })\r\n          }\r\n        }\r\n        func(item)\r\n        return open\r\n      }\r\n    },\r\n    menuItemsUpdated () {\r\n      const clone = this.navMenuItems.slice()\r\n\r\n      for (const [index, item] of this.navMenuItems.entries()) {\r\n        if (item.header && item.items.length && (index || 1)) {\r\n          const i = clone.findIndex(ix => ix.header === item.header)\r\n          for (const [subIndex, subItem] of item.items.entries()) {\r\n            clone.splice(i + 1 + subIndex, 0, subItem)\r\n          }\r\n        }\r\n      }\r\n\r\n      return clone\r\n    },\r\n    isVerticalNavMenuActive: {\r\n      get ()    { return this.$store.state.isVerticalNavMenuActive },\r\n      set (val) { this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', val) }\r\n    },\r\n    layoutType () { return this.$store.state.mainLayoutType },\r\n    reduceButton: {\r\n      get ()    { return this.$store.state.reduceButton },\r\n      set (val) { this.$store.commit('TOGGLE_REDUCE_BUTTON', val) }\r\n    },\r\n    isVerticalNavMenuReduced () { return Boolean(this.reduce && this.reduceButton) },\r\n    verticalNavMenuItemsMin ()  { return this.$store.state.verticalNavMenuItemsMin },\r\n    scrollbarTag ()             { return this.$store.getters.scrollbarTag          },\r\n    windowWidth ()              { return this.$store.state.windowWidth             }\r\n  },\r\n  watch: {\r\n    '$route' () {\r\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\r\n    },\r\n    reduce (val) {\r\n      const verticalNavMenuWidth = val ? 'reduced' : this.$store.state.windowWidth < 1200 ? 'no-nav-menu' : 'default'\r\n      this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\r\n\r\n      setTimeout(function () {\r\n        window.dispatchEvent(new Event('resize'))\r\n      }, 100)\r\n    },\r\n    layoutType ()   { this.setVerticalNavMenuWidth() },\r\n    reduceButton () { this.setVerticalNavMenuWidth() },\r\n    windowWidth ()  { this.setVerticalNavMenuWidth() }\r\n  },\r\n  methods: {\r\n    onMenuSwipe (event) {\r\n      if (event.direction === 4 && this.$vs.rtl) {\r\n\r\n        // Swipe Right\r\n        if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false\r\n\r\n      } else if (event.direction === 2 && !this.$vs.rtl) {\r\n\r\n        // Swipe Left\r\n        if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false\r\n      }\r\n    },\r\n    onSwipeAreaSwipe (event) {\r\n\r\n      if (event.direction === 4 && !this.$vs.rtl) {\r\n\r\n        // Swipe Right\r\n        if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true\r\n      } else if (event.direction === 2 && this.$vs.rtl) {\r\n\r\n        // Swipe Left\r\n        if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true\r\n      }\r\n    },\r\n    psSectionScroll () {\r\n      const scroll_el = this.$refs.verticalNavMenuPs.$el || this.$refs.verticalNavMenuPs\r\n      this.showShadowBottom = scroll_el.scrollTop > 0\r\n    },\r\n    mouseEnter () {\r\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\r\n      this.isMouseEnter = true\r\n    },\r\n    mouseLeave () {\r\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', true)\r\n      this.isMouseEnter = false\r\n    },\r\n    setVerticalNavMenuWidth () {\r\n\r\n      if (this.windowWidth > 1200) {\r\n        if (this.layoutType === 'vertical') {\r\n\r\n          // Set reduce\r\n          this.reduce = !!this.reduceButton\r\n\r\n          // Open NavMenu\r\n          this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\r\n\r\n          // Set Menu Items Only Icon Mode\r\n          const verticalNavMenuItemsMin = !!(this.reduceButton && !this.isMouseEnter)\r\n          this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\r\n\r\n          // Menu Action buttons\r\n          this.clickNotClose   = true\r\n          this.showCloseButton = false\r\n\r\n          const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? 'reduced' : 'default'\r\n          this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\r\n\r\n          return\r\n        }\r\n      }\r\n\r\n      // Close NavMenu\r\n      this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\r\n\r\n      // Reduce button\r\n      if (this.reduceButton) this.reduce = false\r\n\r\n      // Menu Action buttons\r\n      this.showCloseButton = true\r\n      this.clickNotClose   = false\r\n\r\n      // Update NavMenu Width\r\n      this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\r\n\r\n      // Remove Only Icon in Menu\r\n      this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\r\n\r\n\r\n      // if(this.layoutType === 'vertical' || (this.layoutType === 'horizontal' && this.windowWidth < 1200))\r\n      // if (this.windowWidth < 1200) {\r\n\r\n      //   // Close NavMenu\r\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\r\n\r\n      //   // Reduce button\r\n      //   if (this.reduceButton) this.reduce = false\r\n\r\n      //   // Menu Action buttons\r\n      //   this.showCloseButton = true\r\n      //   this.clickNotClose   = false\r\n\r\n      //   // Update NavMenu Width\r\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\r\n\r\n      //   // Remove Only Icon in Menu\r\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\r\n\r\n      // } else {\r\n\r\n      //   // Set reduce\r\n      //   this.reduce = this.reduceButton ? true : false\r\n\r\n      //   // Open NavMenu\r\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\r\n\r\n      //   // Set Menu Items Only Icon Mode\r\n      //   const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\r\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\r\n\r\n      //   // Menu Action buttons\r\n      //   this.clickNotClose   = true\r\n      //   this.showCloseButton = false\r\n\r\n      //   const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\r\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\r\n      // }\r\n    },\r\n    toggleReduce (val) {\r\n      this.reduceButton = val\r\n      this.setVerticalNavMenuWidth()\r\n    }\r\n  },\r\n  mounted () {\r\n    this.setVerticalNavMenuWidth()\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuexy/components/verticalNavMenu.scss\"\r\n</style>\r\n"]}]}