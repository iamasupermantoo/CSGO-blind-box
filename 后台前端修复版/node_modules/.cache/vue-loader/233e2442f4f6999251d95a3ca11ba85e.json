{"remainingRequest":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\views\\components\\extra-components\\tree\\TreeSearchTree.vue?vue&type=style&index=0&id=58624268&lang=scss&","dependencies":[{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\views\\components\\extra-components\\tree\\TreeSearchTree.vue","mtime":1620826038000},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\css-loader\\index.js","mtime":1664268236894},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1664268237964},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\postcss-loader\\src\\index.js","mtime":1664268237567},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1664268245582},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1664268237964}],"contextDependencies":[],"result":["\r\n@import \"@/assets/scss/vuexy/extraComponents/tree.scss\";\r\n\r\nbutton.btn-async{\r\n  background: rgba(var(--vs-warning),0.15);\r\n}\r\n\r\nbutton.btn-delete{\r\n  background: rgba(var(--vs-danger),0.15);\r\n}\r\n",{"version":3,"sources":["TreeSearchTree.vue"],"names":[],"mappings":";AA6KA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"TreeSearchTree.vue","sourceRoot":"src/views/components/extra-components/tree","sourcesContent":["<template>\r\n  <vx-card title=\"Search Tree\" code-toggler>\r\n    <vs-input class=\"inputx tree-search-input float-left mr-2\" placeholder=\"Search...\" v-model.lazy=\"searchword\" />\r\n    <vs-button color=\"primary\" type=\"filled\" @click=\"search\" class=\"mb-3\">Search</vs-button>\r\n    <v-tree ref=\"tree\" :canDeleteRoot=\"true\" :data=\"treeData\" :draggable=\"true\" :tpl=\"tpl\" :halfcheck=\"true\" :multiple=\"true\"/>\r\n\r\n    <template slot=\"codeContainer\">\r\n&lt;template&gt;\r\n  &lt;vs-input class=&quot;inputx tree-search-input float-left mr-2&quot; placeholder=&quot;Search...&quot; v-model.lazy=&quot;searchword&quot; /&gt;\r\n  &lt;vs-button color=&quot;primary&quot; type=&quot;filled&quot; @click=&quot;search&quot; class=&quot;mb-3&quot;&gt;Search&lt;/vs-button&gt;\r\n  &lt;v-tree ref=&apos;tree&apos; :canDeleteRoot=&quot;true&quot; :data=&apos;treeData&apos; :draggable=&apos;true&apos; :tpl=&apos;tpl&apos; :halfcheck=&apos;true&apos; :multiple=&quot;true&quot;/&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nimport { VTree, VSelectTree}  from &apos;vue-tree-halower&apos;\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchword: &apos;&apos;,\r\n      treeData: [{\r\n        title: &apos;node1&apos;,\r\n        expanded: true,\r\n        children: [{\r\n          title: &apos;node 1-1&apos;,\r\n          expanded: true,\r\n          children: [{\r\n            title: &apos;node 1-1-1&apos;\r\n          }, {\r\n            title: &apos;node 1-1-2&apos;\r\n          }, {\r\n            title: &apos;node 1-1-3&apos;\r\n          }]\r\n        }, {\r\n          title: &apos;node 1-2&apos;,\r\n          children: [{\r\n            title: &quot;&lt;span style=&apos;color: red&apos;&gt;node 1-2-1&lt;/span&gt;&quot;\r\n          }, {\r\n            title: &quot;&lt;span style=&apos;color: red&apos;&gt;node 1-2-2&lt;/span&gt;&quot;\r\n          }]\r\n        }]\r\n      }]\r\n    }\r\n  },\r\n  methods: {\r\n    search () {\r\n      this.$refs.tree.searchNodes(this.searchword)\r\n    },\r\n    tpl (...args) {\r\n      let {0: node, 2: parent, 3: index} = args\r\n      let titleClass = node.selected ? &apos;node-title node-selected&apos; : &apos;node-title&apos;\r\n      if (node.searched) titleClass += &apos; node-searched&apos;\r\n      return &lt;span&gt;\r\n        &lt;span class=&quot;tree-expand&quot; onClick={() =&gt; this.$refs.tree.addNode(node, {title: &apos;sync node&apos;})}&gt;+&lt;/span&gt;\r\n         &lt;span class={titleClass} domPropsInnerHTML={node.title} onClick={() =&gt; {\r\n           this.$refs.tree.nodeSelected(node)\r\n         }}&gt;&lt;/span&gt;\r\n      &lt;button class=&quot;btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded&quot; onClick={() =&gt; this.asyncLoad(node)}&gt;async&lt;/button&gt;\r\n      &lt;button class=&quot;btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded&quot; onClick={() =&gt; this.$refs.tree.delNode(node, parent, index)}&gt;delete&lt;/button&gt;\r\n      &lt;/span&gt;\r\n    },\r\n    async asyncLoad (node) {\r\n      const {checked = false} = node\r\n      this.$set(node, &apos;loading&apos;, true)\r\n      let pro = new Promise(resolve =&gt; {\r\n        setTimeout(resolve, 2000, [&apos;async node1&apos;, &apos;async node2&apos;])\r\n      })\r\n      this.$refs.tree.addNodes(node, await pro)\r\n      this.$set(node, &apos;loading&apos;, false)\r\n      if (checked) {\r\n        this.$refs.tree.childCheckedHandle(node, checked)\r\n      }\r\n    },\r\n  },\r\n  components: {\r\n    VTree,\r\n    VSelectTree\r\n  }\r\n}\r\n&lt;/script&gt;\r\n\r\n&lt;style lang=&quot;scss&quot;&gt;\r\n@import &quot;@/assets/scss/vuexy/extraComponents/tree.scss&quot;;\r\n\r\nbutton.btn-async{\r\n  background: rgba(var(--vs-warning),0.15);\r\n}\r\n\r\nbutton.btn-delete{\r\n  background: rgba(var(--vs-danger),0.15);\r\n}\r\n&lt;/style&gt;\r\n    </template>\r\n  </vx-card>\r\n</template>\r\n\r\n<script>\r\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      searchword: '',\r\n      treeData: [\r\n        {\r\n          title: 'node1',\r\n          expanded: true,\r\n          children: [\r\n            {\r\n              title: 'node 1-1',\r\n              expanded: true,\r\n              children: [\r\n                {\r\n                  title: 'node 1-1-1'\r\n                }, {\r\n                  title: 'node 1-1-2'\r\n                }, {\r\n                  title: 'node 1-1-3'\r\n                }\r\n              ]\r\n            }, {\r\n              title: 'node 1-2',\r\n              children: [\r\n                {\r\n                  title: '<span style=\\'color: red\\'>node 1-2-1</span>'\r\n                }, {\r\n                  title: '<span style=\\'color: red\\'>node 1-2-2</span>'\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    search () {\r\n      this.$refs.tree.searchNodes(this.searchword)\r\n    },\r\n    tpl (...args) {\r\n      const {0: node, 2: parent, 3: index} = args\r\n      let titleClass = node.selected ? 'node-title node-selected' : 'node-title'\r\n      if (node.searched) titleClass += ' node-searched'\r\n      return <span>\r\n        <span class=\"tree-expand\" onClick={() => this.$refs.tree.addNode(node, {title: 'sync node'})}>+</span>\r\n        <span class={titleClass} domPropsInnerHTML={node.title} onClick={() => {\r\n          this.$refs.tree.nodeSelected(node)\r\n        }}></span>\r\n        <button class=\"btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded\" onClick={() => this.asyncLoad(node)}>async</button>\r\n        <button class=\"btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded\" onClick={() => this.$refs.tree.delNode(node, parent, index)}>delete</button>\r\n      </span>\r\n    },\r\n    async asyncLoad (node) {\r\n      const {checked = false} = node\r\n      this.$set(node, 'loading', true)\r\n      const pro = new Promise(resolve => {\r\n        setTimeout(resolve, 2000, ['async node1', 'async node2'])\r\n      })\r\n      this.$refs.tree.addNodes(node, await pro)\r\n      this.$set(node, 'loading', false)\r\n      if (checked) {\r\n        this.$refs.tree.childCheckedHandle(node, checked)\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    VTree,\r\n    VSelectTree\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuexy/extraComponents/tree.scss\";\r\n\r\nbutton.btn-async{\r\n  background: rgba(var(--vs-warning),0.15);\r\n}\r\n\r\nbutton.btn-delete{\r\n  background: rgba(var(--vs-danger),0.15);\r\n}\r\n</style>\r\n"]}]}