{"remainingRequest":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\views\\apps\\chat\\ChatNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\views\\apps\\chat\\ChatNavbar.vue","mtime":1620826038000},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1664268237683},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\babel-loader\\lib\\index.js","mtime":1663908471338},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1664268237964}],"contextDependencies":[],"result":["\r\nexport default {\r\n  props: {\r\n    userId: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    isPinnedProp: {\r\n      type: Boolean,\r\n      required: true\r\n    },\r\n    isSidebarCollapsed: {\r\n      type: Boolean,\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    isPinnedLocal: {\r\n      get () {\r\n        return this.isPinnedProp\r\n      },\r\n      set (val) {\r\n        const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId)\r\n        if (chatData) {\r\n          const payload = { id: this.userId, value: val }\r\n          this.$store.dispatch('chat/toggleIsPinned', payload)\r\n            .then(() => { this.$emit('toggleIsChatPinned', val) })\r\n            .catch((err) => { console.error(err) })\r\n        } else {\r\n          this.$emit('toggleIsChatPinned', val)\r\n        }\r\n      }\r\n    },\r\n    userDetails () {\r\n      return this.$store.getters['chat/contact'](this.userId)\r\n    },\r\n    getStatusColor () {\r\n      return (isActiveUser) => {\r\n        const userStatus = this.getUserStatus(isActiveUser)\r\n\r\n        if (userStatus === 'online') {\r\n          return 'success'\r\n        } else if (userStatus === 'do not disturb') {\r\n          return 'danger'\r\n        } else if (userStatus === 'away') {\r\n          return 'warning'\r\n        } else {\r\n          return 'grey'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    getUserStatus (isActiveUser) {\r\n      return isActiveUser ? this.$store.state.AppActiveUser.status : this.userDetails.status\r\n    }\r\n  }\r\n}\r\n\r\n",{"version":3,"sources":["ChatNavbar.vue"],"names":[],"mappings":";AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChatNavbar.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\r\n    File Name: ChatNavbar.vue\r\n    Description: Chat Application - Chat navbar\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n<template>\r\n    <div v-if=\"userId != null\" class=\"chat__header\">\r\n        <vs-navbar class=\"p-4 flex navbar-custom\" color=\"white\" type=\"flat\">\r\n            <div class=\"relative flex mr-4\">\r\n                <feather-icon icon=\"MenuIcon\" class=\"mr-4 cursor-pointer\" v-if=\"isSidebarCollapsed\" @click.stop=\"$emit('openContactsSidebar')\" />\r\n                <vs-avatar class=\"m-0 border-2 border-solid border-white\" size=\"40px\" :src=\"userDetails.photoURL\" @click.stop=\"$emit('showProfileSidebar', userId)\" />\r\n                <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute right-0 bottom-0\" :class=\"'bg-' + getStatusColor(false)\"></div>\r\n            </div>\r\n            <h6>{{ userDetails.displayName }}</h6>\r\n            <vs-spacer></vs-spacer>\r\n            <feather-icon icon=\"StarIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-warning stroke-current': isPinnedLocal}, 'w-6', 'h-6']\" @click.stop=\"isPinnedLocal = !isPinnedLocal\"></feather-icon>\r\n        </vs-navbar>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    userId: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    isPinnedProp: {\r\n      type: Boolean,\r\n      required: true\r\n    },\r\n    isSidebarCollapsed: {\r\n      type: Boolean,\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    isPinnedLocal: {\r\n      get () {\r\n        return this.isPinnedProp\r\n      },\r\n      set (val) {\r\n        const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId)\r\n        if (chatData) {\r\n          const payload = { id: this.userId, value: val }\r\n          this.$store.dispatch('chat/toggleIsPinned', payload)\r\n            .then(() => { this.$emit('toggleIsChatPinned', val) })\r\n            .catch((err) => { console.error(err) })\r\n        } else {\r\n          this.$emit('toggleIsChatPinned', val)\r\n        }\r\n      }\r\n    },\r\n    userDetails () {\r\n      return this.$store.getters['chat/contact'](this.userId)\r\n    },\r\n    getStatusColor () {\r\n      return (isActiveUser) => {\r\n        const userStatus = this.getUserStatus(isActiveUser)\r\n\r\n        if (userStatus === 'online') {\r\n          return 'success'\r\n        } else if (userStatus === 'do not disturb') {\r\n          return 'danger'\r\n        } else if (userStatus === 'away') {\r\n          return 'warning'\r\n        } else {\r\n          return 'grey'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    getUserStatus (isActiveUser) {\r\n      return isActiveUser ? this.$store.state.AppActiveUser.status : this.userDetails.status\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n"]}]}