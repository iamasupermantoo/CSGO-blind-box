{"remainingRequest":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\components\\excel\\ImportExcel.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\src\\components\\excel\\ImportExcel.vue","mtime":1620826038000},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\babel-loader\\lib\\index.js","mtime":1663908471338},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"D:\\Program Files (x86)\\wechat\\WeChat Files\\wxid_ue0ca48wn2m522\\FileStorage\\File\\2022-09\\盲盒源码\\后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1664268237964}],"contextDependencies":[],"result":["\r\nimport XLSX from 'xlsx'\r\n\r\nexport default {\r\n  props: {\r\n    onSuccess: {\r\n      type: Function,\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      excelData: {\r\n        header: null,\r\n        results: null,\r\n        meta: null\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    generateData ({ header, results, meta }) {\r\n      this.excelData.header = header\r\n      this.excelData.results = results\r\n      this.excelData.meta = meta\r\n      if (this.onSuccess) this.onSuccess(this.excelData)\r\n    },\r\n    getHeaderRow (sheet) {\r\n      const headers = []\r\n      const range = XLSX.utils.decode_range(sheet['!ref'])\r\n      let C = undefined\r\n      const R = range.s.r\r\n      /* start in the first row */\r\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\r\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\r\n        /* find the cell in the first row */\r\n        let hdr = `UNKNOWN ${  C}` // <-- replace with your desired default\r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n      }\r\n      return headers\r\n    },\r\n    handleDragover (e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      e.dataTransfer.dropEffect = 'copy'\r\n    },\r\n    handleDrop (e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      const files = e.dataTransfer.files\r\n      if (files.length !== 1) {\r\n        this.$vs.notify({\r\n          title: 'Login Attempt',\r\n          text: 'Only support uploading one file!',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle',\r\n          color: 'warning'\r\n        })\r\n        return\r\n      }\r\n      const rawFile = files[0] // only use files[0]\r\n      if (!this.isExcel(rawFile)) {\r\n        this.$vs.notify({\r\n          title: 'Login Attempt',\r\n          text: 'Only supports upload .xlsx, .xls, .csv suffix files',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle',\r\n          color: 'warning'\r\n        })\r\n        return false\r\n      }\r\n      this.uploadFile(rawFile)\r\n    },\r\n    readerData (rawFile) {\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader()\r\n        reader.onload = e => {\r\n          const data = e.target.result\r\n          const workbook = XLSX.read(data, { type: 'array' })\r\n          const firstSheetName = workbook.SheetNames[0]\r\n          const worksheet = workbook.Sheets[firstSheetName]\r\n          const header = this.getHeaderRow(worksheet)\r\n          const results = XLSX.utils.sheet_to_json(worksheet)\r\n          const meta = { sheetName: firstSheetName }\r\n          this.generateData({ header, results, meta })\r\n          resolve()\r\n        }\r\n        reader.readAsArrayBuffer(rawFile)\r\n      })\r\n    },\r\n    handleClick (e) {\r\n      const files = e.target.files\r\n      const rawFile = files[0]\r\n      if (!rawFile) return\r\n      this.uploadFile(rawFile)\r\n    },\r\n    isExcel (file) {\r\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\r\n    },\r\n    uploadFile (file) {\r\n      this.$refs['fileInput'].value = null // fix can't select the same excel\r\n      this.readerData(file)\r\n    }\r\n\r\n  }\r\n}\r\n",{"version":3,"sources":["ImportExcel.vue"],"names":[],"mappings":";AAkfile":"ImportExcel.vue","sourceRoot":"src/components/excel","sourcesContent":["<template>\r\n  <div class=\"excel-import\">\r\n    <input type=\"file\" ref=\"fileInput\" class=\"hidden\" accept=\".xlsx, .xls\" @change=\"handleClick\">\r\n    <div\r\n      @click=\"$refs.fileInput.click()\"\r\n      @drop=\"handleDrop\"\r\n      @dragover=\"handleDragover\"\r\n      @dragenter=\"handleDragover\"\r\n      class=\"px-8 py-16 cursor-pointer text-center border-2 border-dashed d-theme-border-grey-light d-theme-dark-bg text-xl\">\r\n      <feather-icon icon=\"UploadCloudIcon\" svgClasses=\"h-16 w-16 stroke-current text-grey\" class=\"block\" />\r\n      <span>Drop Excel File or </span>\r\n      <span class=\"font-medium text-primary\" @click.stop=\"$refs.fileInput.click()\">Browse</span>\r\n      <!-- <vs-button type=\"border\" @click.stop=\"$refs.fileInput.click()\">Browse</vs-button> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport XLSX from 'xlsx'\r\n\r\nexport default {\r\n  props: {\r\n    onSuccess: {\r\n      type: Function,\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      excelData: {\r\n        header: null,\r\n        results: null,\r\n        meta: null\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    generateData ({ header, results, meta }) {\r\n      this.excelData.header = header\r\n      this.excelData.results = results\r\n      this.excelData.meta = meta\r\n      if (this.onSuccess) this.onSuccess(this.excelData)\r\n    },\r\n    getHeaderRow (sheet) {\r\n      const headers = []\r\n      const range = XLSX.utils.decode_range(sheet['!ref'])\r\n      let C = undefined\r\n      const R = range.s.r\r\n      /* start in the first row */\r\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\r\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\r\n        /* find the cell in the first row */\r\n        let hdr = `UNKNOWN ${  C}` // <-- replace with your desired default\r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n      }\r\n      return headers\r\n    },\r\n    handleDragover (e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      e.dataTransfer.dropEffect = 'copy'\r\n    },\r\n    handleDrop (e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      const files = e.dataTransfer.files\r\n      if (files.length !== 1) {\r\n        this.$vs.notify({\r\n          title: 'Login Attempt',\r\n          text: 'Only support uploading one file!',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle',\r\n          color: 'warning'\r\n        })\r\n        return\r\n      }\r\n      const rawFile = files[0] // only use files[0]\r\n      if (!this.isExcel(rawFile)) {\r\n        this.$vs.notify({\r\n          title: 'Login Attempt',\r\n          text: 'Only supports upload .xlsx, .xls, .csv suffix files',\r\n          iconPack: 'feather',\r\n          icon: 'icon-alert-circle',\r\n          color: 'warning'\r\n        })\r\n        return false\r\n      }\r\n      this.uploadFile(rawFile)\r\n    },\r\n    readerData (rawFile) {\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader()\r\n        reader.onload = e => {\r\n          const data = e.target.result\r\n          const workbook = XLSX.read(data, { type: 'array' })\r\n          const firstSheetName = workbook.SheetNames[0]\r\n          const worksheet = workbook.Sheets[firstSheetName]\r\n          const header = this.getHeaderRow(worksheet)\r\n          const results = XLSX.utils.sheet_to_json(worksheet)\r\n          const meta = { sheetName: firstSheetName }\r\n          this.generateData({ header, results, meta })\r\n          resolve()\r\n        }\r\n        reader.readAsArrayBuffer(rawFile)\r\n      })\r\n    },\r\n    handleClick (e) {\r\n      const files = e.target.files\r\n      const rawFile = files[0]\r\n      if (!rawFile) return\r\n      this.uploadFile(rawFile)\r\n    },\r\n    isExcel (file) {\r\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\r\n    },\r\n    uploadFile (file) {\r\n      this.$refs['fileInput'].value = null // fix can't select the same excel\r\n      this.readerData(file)\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n"]}]}