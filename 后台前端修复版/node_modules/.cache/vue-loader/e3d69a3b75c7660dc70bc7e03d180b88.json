{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\views\\apps\\todo\\TodoTask.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\views\\apps\\todo\\TodoTask.vue","mtime":1620826038000},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\babel-loader\\lib\\index.js","mtime":1663908471338},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1664268237964}],"contextDependencies":[],"result":["\r\nexport default{\r\n  props: {\r\n    taskId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      taskLocal: this.$store.getters['todo/getTask'](this.taskId)\r\n    }\r\n  },\r\n  computed: {\r\n    isCompleted: {\r\n      get () {\r\n        return this.taskLocal.isCompleted\r\n      },\r\n      set (value) {\r\n        this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isCompleted: value}))\r\n          .then((response) => {\r\n            this.taskLocal.isCompleted = response.data.isCompleted\r\n          })\r\n          .catch((error) => { console.error(error) })\r\n      }\r\n    },\r\n    todoLabelColor () {\r\n      return (label) => {\r\n        const tags = this.$store.state.todo.taskTags\r\n        return tags.find((tag) => {\r\n          return tag.value === label\r\n        }).color\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    toggleIsImportant () {\r\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isImportant: !this.taskLocal.isImportant}))\r\n        .then((response) => {\r\n          this.taskLocal.isImportant = response.data.isImportant\r\n        })\r\n        .catch((error) => { console.error(error) })\r\n    },\r\n    toggleIsStarred () {\r\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isStarred: !this.taskLocal.isStarred}))\r\n        .then((response) => {\r\n          this.taskLocal.isStarred = response.data.isStarred\r\n        })\r\n        .catch((error) => { console.error(error) })\r\n    },\r\n    moveToTrash () {\r\n\r\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isTrashed: true}))\r\n        .then((response) => {\r\n          // console.log(response.data);\r\n          this.taskLocal.isTrashed = response.data.isTrashed\r\n          this.$el.style.display = 'none'   // Hides element from DOM\r\n        })\r\n        .catch((error) => { console.error(error) })\r\n\r\n      // Un-comment below line if you want to fetch task after task is deleted\r\n      // this.$store.dispatch(\"todo/fetchTasks\", {filter: this.$route.params.filter})\r\n    },\r\n    displayPrompt () {\r\n      this.$emit('showDisplayPrompt', this.taskId)\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["TodoTask.vue"],"names":[],"mappings":";AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TodoTask.vue","sourceRoot":"src/views/apps/todo","sourcesContent":["<!-- =========================================================================================\r\n    File Name: TodoItem.vue\r\n    Description: Single todo item component\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n    <div @click=\"displayPrompt\" class=\"px-4 py-4 list-item-component\">\r\n        <div class=\"vx-row\">\r\n            <div class=\"vx-col w-full sm:w-5/6 flex sm:items-center sm:flex-row flex-col\">\r\n                <div class=\"flex items-center\">\r\n                    <vs-checkbox v-model=\"isCompleted\" class=\"w-8 m-0 vs-checkbox-small\" @click.stop />\r\n                    <h6 class=\"todo-title\" :class=\"{'line-through': taskLocal.isCompleted}\">{{ taskLocal.title }}</h6>\r\n                </div>\r\n                <div class=\"todo-tags sm:ml-2 sm:my-0 my-2 flex\">\r\n                    <vs-chip v-for=\"(tag, index) in taskLocal.tags\" :key=\"index\">\r\n                        <div class=\"h-2 w-2 rounded-full mr-1\" :class=\"'bg-' + todoLabelColor(tag)\"></div>\r\n                        <span>{{ tag | capitalize }}</span>\r\n                    </vs-chip>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"vx-col w-full sm:w-1/6 ml-auto flex sm:justify-end\">\r\n                <feather-icon\r\n                  icon=\"InfoIcon\"\r\n                  class=\"cursor-pointer\"\r\n                  :svgClasses=\"[{'text-success stroke-current': taskLocal.isImportant}, 'w-5', 'h-5 mr-4']\"\r\n                  @click.stop=\"toggleIsImportant\" />\r\n\r\n                <feather-icon\r\n                  icon=\"StarIcon\"\r\n                  class=\"cursor-pointer\"\r\n                  :svgClasses=\"[{'text-warning stroke-current': taskLocal.isStarred}, 'w-5', 'h-5 mr-4']\"\r\n                  @click.stop=\"toggleIsStarred\" />\r\n                <feather-icon\r\n                  v-if=\"!taskLocal.isTrashed\"\r\n                  icon=\"TrashIcon\"\r\n                  class=\"cursor-pointer\"\r\n                  svgClasses=\"w-5 h-5\"\r\n                  @click.stop=\"moveToTrash\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"vx-row\" v-if=\"taskLocal.desc\">\r\n            <div class=\"vx-col w-full\">\r\n                <p class=\"mt-2 truncate\" :class=\"{'line-through': taskLocal.isCompleted}\">{{ taskLocal.desc }}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default{\r\n  props: {\r\n    taskId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      taskLocal: this.$store.getters['todo/getTask'](this.taskId)\r\n    }\r\n  },\r\n  computed: {\r\n    isCompleted: {\r\n      get () {\r\n        return this.taskLocal.isCompleted\r\n      },\r\n      set (value) {\r\n        this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isCompleted: value}))\r\n          .then((response) => {\r\n            this.taskLocal.isCompleted = response.data.isCompleted\r\n          })\r\n          .catch((error) => { console.error(error) })\r\n      }\r\n    },\r\n    todoLabelColor () {\r\n      return (label) => {\r\n        const tags = this.$store.state.todo.taskTags\r\n        return tags.find((tag) => {\r\n          return tag.value === label\r\n        }).color\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    toggleIsImportant () {\r\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isImportant: !this.taskLocal.isImportant}))\r\n        .then((response) => {\r\n          this.taskLocal.isImportant = response.data.isImportant\r\n        })\r\n        .catch((error) => { console.error(error) })\r\n    },\r\n    toggleIsStarred () {\r\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isStarred: !this.taskLocal.isStarred}))\r\n        .then((response) => {\r\n          this.taskLocal.isStarred = response.data.isStarred\r\n        })\r\n        .catch((error) => { console.error(error) })\r\n    },\r\n    moveToTrash () {\r\n\r\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isTrashed: true}))\r\n        .then((response) => {\r\n          // console.log(response.data);\r\n          this.taskLocal.isTrashed = response.data.isTrashed\r\n          this.$el.style.display = 'none'   // Hides element from DOM\r\n        })\r\n        .catch((error) => { console.error(error) })\r\n\r\n      // Un-comment below line if you want to fetch task after task is deleted\r\n      // this.$store.dispatch(\"todo/fetchTasks\", {filter: this.$route.params.filter})\r\n    },\r\n    displayPrompt () {\r\n      this.$emit('showDisplayPrompt', this.taskId)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}