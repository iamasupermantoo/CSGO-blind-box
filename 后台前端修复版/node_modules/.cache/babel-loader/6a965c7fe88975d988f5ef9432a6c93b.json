{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\views\\apps\\email\\Email.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\views\\apps\\email\\Email.vue","mtime":1620826038000},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\babel.config.js","mtime":1620826038000},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\babel-loader\\lib\\index.js","mtime":1663908471338},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\vue-loader\\lib\\index.js","mtime":1664268237964}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.filter\";\nimport EmailSidebar from \"./EmailSidebar.vue\";\nimport MailItem from \"./MailItem.vue\";\nimport EmailView from \"./EmailView.vue\";\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport moduleEmail from '@/store/email/moduleEmail.js';\nexport default {\n  data: function data() {\n    return {\n      openMailId: null,\n      selectedMails: [],\n      isSidebarActive: false,\n      showThread: false,\n      clickNotClose: true,\n      isEmailSidebarActive: true,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.30\n      }\n    };\n  },\n  watch: {\n    isSidebarActive: function isSidebarActive(value) {\n      if (!value) this.showThread = false;\n    },\n    mailFilter: function mailFilter() {\n      this.selectedMails = [];\n      var scroll_el = this.$refs.mailListPS.$el || this.$refs.mailListPS;\n      scroll_el.scrollTop = 0;\n      this.$store.commit('email/UPDATE_MAIL_FILTER', this.$route.params.filter);\n      this.$store.dispatch('email/fetchEmails', {\n        filter: this.$route.params.filter\n      });\n      this.toggleEmailSidebar();\n    },\n    windowWidth: function windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    mailFilter: function mailFilter() {\n      return this.$route.params.filter;\n    },\n    emailTags: function emailTags() {\n      return this.$store.state.email.mailTags;\n    },\n    searchQuery: {\n      get: function get() {\n        return this.$store.state.email.mailSearchQuery;\n      },\n      set: function set(val) {\n        this.$store.dispatch('email/setEmailSearchQuery', val);\n      }\n    },\n    selectAllCheckBox: {\n      get: function get() {\n        return this.selectedMails.length;\n      },\n      set: function set(value) {\n        value ? this.selectedMails = this.mails.map(function (mail) {\n          return mail.id;\n        }) : this.selectedMails = [];\n      }\n    },\n    mails: function mails() {\n      return this.$store.getters['email/filteredMails'];\n    },\n    selectAllIcon: function selectAllIcon() {\n      return this.selectedMails.length === this.mails.length ? 'icon-check' : 'icon-minus';\n    },\n    scrollbarTag: function scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    isMailSelected: function isMailSelected() {\n      var _this = this;\n\n      return function (mailId) {\n        return _this.selectedMails.indexOf(mailId) !== -1;\n      };\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    updateOpenMail: function updateOpenMail(mailId) {\n      this.openMailId = mailId;\n      this.isSidebarActive = true;\n    },\n    addToSelectedMails: function addToSelectedMails(mailId) {\n      if (this.selectedMails.indexOf(mailId) === -1) this.selectedMails.push(mailId);\n    },\n    removeSelectedMail: function removeSelectedMail(mailId) {\n      var mailIndex = this.selectedMails.indexOf(mailId);\n      if (mailIndex !== -1) this.selectedMails.splice(mailIndex, 1);\n    },\n    moveTo: function moveTo(to) {\n      var payload = {\n        emailIds: this.selectedMails,\n        to: to\n      };\n      this.$store.dispatch('email/moveMailsTo', payload).catch(function (error) {\n        console.error(error);\n      });\n      this.selectedMails = [];\n    },\n    moveCurrentTo: function moveCurrentTo(to) {\n      this.selectedMails = [this.openMailId];\n      this.moveTo(to);\n    },\n    updateMarkUnread: function updateMarkUnread() {\n      var payload = {\n        emailIds: this.selectedMails,\n        unreadFlag: true\n      };\n      this.$store.dispatch('email/setUnread', payload);\n      this.selectedMails = [];\n    },\n    removeOpenMail: function removeOpenMail() {\n      this.selectedMails = [this.openMailId];\n      this.moveTo('trashed');\n      this.isSidebarActive = false;\n    },\n    toggleIsStarred: function toggleIsStarred() {\n      var payload = {\n        mailId: this.currentMail.id,\n        value: !this.currentMail.isStarred\n      };\n      this.$store.dispatch('email/toggleIsMailStarred', payload);\n    },\n    nextMail: function nextMail() {\n      var _this2 = this;\n\n      var currentMailIndex = this.mails.findIndex(function (mail) {\n        return mail.id === _this2.openMailId;\n      });\n      if (this.mails[currentMailIndex + 1]) this.openMailId = this.mails[currentMailIndex + 1].id;\n    },\n    previousMail: function previousMail() {\n      var _this3 = this;\n\n      var currentMailIndex = this.mails.findIndex(function (mail) {\n        return mail.id === _this3.openMailId;\n      });\n      if (this.mails[currentMailIndex - 1]) this.openMailId = this.mails[currentMailIndex - 1].id;\n    },\n    updateSingleMarkUnread: function updateSingleMarkUnread() {\n      this.selectedMails = [this.openMailId];\n      this.updateMarkUnread();\n      this.isSidebarActive = false;\n    },\n    updateLabels: function updateLabels(label) {\n      this.$store.dispatch('email/updateLabels', {\n        mails: this.selectedMails,\n        label: label\n      });\n      this.selectedMails = [];\n    },\n    closeMailViewSidebar: function closeMailViewSidebar() {\n      this.isSidebarActive = false;\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isEmailSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isEmailSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleEmailSidebar: function toggleEmailSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!value) {\n        this.closeMailViewSidebar();\n\n        if (this.clickNotClose) {\n          return;\n        }\n      }\n\n      this.isEmailSidebarActive = value;\n    }\n  },\n  components: {\n    MailItem: MailItem,\n    EmailSidebar: EmailSidebar,\n    EmailView: EmailView,\n    VuePerfectScrollbar: VuePerfectScrollbar\n  },\n  created: function created() {\n    this.$store.registerModule('email', moduleEmail);\n    this.setSidebarWidth();\n    this.$store.commit('email/UPDATE_MAIL_FILTER', this.$route.params.filter); // Update Mail Filter\n\n    this.$store.dispatch('email/fetchEmails', {\n      filter: this.$route.params.filter\n    }); // Fetch Emails From API\n\n    this.$store.dispatch('email/fetchMeta'); // Fetch Unread Mails\n\n    this.$store.dispatch('email/fetchTags'); // Fetch Mail Tags\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$store.unregisterModule('email');\n  },\n  mounted: function mounted() {\n    this.$store.dispatch('email/setEmailSearchQuery', '');\n  }\n};",{"version":3,"mappings":";;;;AAgHA;AACA;AACA;AACA;AACA;AAEA;EACAA,IADA,kBACA;IACA;MACAC,gBADA;MAEAC,iBAFA;MAGAC,sBAHA;MAIAC,iBAJA;MAKAC,mBALA;MAMAC,0BANA;MAOAC;QACAC,sBADA;QAEAC;MAFA;IAPA;EAYA,CAdA;EAeAC;IACAP,eADA,2BACAQ,KADA,EACA;MACA;IACA,CAHA;IAIAC,UAJA,wBAIA;MACA;MAEA;MACAC;MAEA;MACA;QAAAC;MAAA;MACA;IACA,CAbA;IAcAC,WAdA,yBAcA;MACA;IACA;EAhBA,CAfA;EAiCAC;IACAJ,UADA,wBACA;MACA;IACA,CAHA;IAIAK,SAJA,uBAIA;MACA;IACA,CANA;IAOAC;MACAC,GADA,iBACA;QACA;MACA,CAHA;MAIAC,GAJA,eAIAC,GAJA,EAIA;QACA;MACA;IANA,CAPA;IAeAC;MACAH,GADA,iBACA;QACA;MACA,CAHA;MAIAC,GAJA,eAIAT,KAJA,EAIA;QACAA;UAAA;QAAA;MACA;IANA,CAfA;IAuBAY,KAvBA,mBAuBA;MACA;IACA,CAzBA;IA0BAC,aA1BA,2BA0BA;MACA;IACA,CA5BA;IA6BAC,YA7BA,0BA6BA;MAAA;IAAA,CA7BA;IA8BAC,cA9BA,4BA8BA;MAAA;;MACA;QAAA;MAAA;IACA,CAhCA;IAiCAX,WAjCA,yBAiCA;MACA;IACA;EAnCA,CAjCA;EAsEAY;IACAC,cADA,0BACAC,MADA,EACA;MACA;MACA;IACA,CAJA;IAKAC,kBALA,8BAKAD,MALA,EAKA;MACA;IACA,CAPA;IAQAE,kBARA,8BAQAF,MARA,EAQA;MACA;MACA;IACA,CAXA;IAYAG,MAZA,kBAYAC,EAZA,EAYA;MACA;QAAAC;QAAAD;MAAA;MACA,mDACAE,KADA,CACA;QAAAC;MAAA,CADA;MAEA;IACA,CAjBA;IAkBAC,aAlBA,yBAkBAJ,EAlBA,EAkBA;MACA;MACA;IACA,CArBA;IAsBAK,gBAtBA,8BAsBA;MACA;QAAAJ;QAAAK;MAAA;MACA;MACA;IACA,CA1BA;IA2BAC,cA3BA,4BA2BA;MACA;MACA;MACA;IACA,CA/BA;IAgCAC,eAhCA,6BAgCA;MACA;QAAAZ;QAAAlB;MAAA;MACA;IACA,CAnCA;IAoCA+B,QApCA,sBAoCA;MAAA;;MACA;QAAA;MAAA;MACA;IACA,CAvCA;IAwCAC,YAxCA,0BAwCA;MAAA;;MACA;QAAA;MAAA;MACA;IACA,CA3CA;IA4CAC,sBA5CA,oCA4CA;MACA;MACA;MACA;IACA,CAhDA;IAiDAC,YAjDA,wBAiDAC,KAjDA,EAiDA;MACA;QAAAvB;QAAAuB;MAAA;MACA;IACA,CApDA;IAqDAC,oBArDA,kCAqDA;MACA;IACA,CAvDA;IAwDAC,eAxDA,6BAwDA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CA9DA;IA+DAC,kBA/DA,gCA+DA;MAAA;;MACA;QACA;;QACA;UACA;QACA;MACA;;MACA;IACA;EAvEA,CAtEA;EA+IAC;IACAC,kBADA;IAEAC,0BAFA;IAGAC,oBAHA;IAIAC;EAJA,CA/IA;EAqJAC,OArJA,qBAqJA;IACA;IACA;IAEA,0EAJA,CAIA;;IACA;MAAAzC;IAAA,GALA,CAKA;;IACA,wCANA,CAMA;;IACA,wCAPA,CAOA;EACA,CA7JA;EA8JA0C,aA9JA,2BA8JA;IACA;EACA,CAhKA;EAiKAC,OAjKA,qBAiKA;IACA;EACA;AAnKA","names":["data","openMailId","selectedMails","isSidebarActive","showThread","clickNotClose","isEmailSidebarActive","settings","maxScrollbarLength","wheelSpeed","watch","value","mailFilter","scroll_el","filter","windowWidth","computed","emailTags","searchQuery","get","set","val","selectAllCheckBox","mails","selectAllIcon","scrollbarTag","isMailSelected","methods","updateOpenMail","mailId","addToSelectedMails","removeSelectedMail","moveTo","to","emailIds","catch","console","moveCurrentTo","updateMarkUnread","unreadFlag","removeOpenMail","toggleIsStarred","nextMail","previousMail","updateSingleMarkUnread","updateLabels","label","closeMailViewSidebar","setSidebarWidth","toggleEmailSidebar","components","MailItem","EmailSidebar","EmailView","VuePerfectScrollbar","created","beforeDestroy","mounted"],"sourceRoot":"src/views/apps/email","sources":["Email.vue"],"sourcesContent":["<!-- =========================================================================================\r\n    File Name: Email.vue\r\n    Description: Email Application (Inbox)\r\n    ----------------------------------------------------------------------------------------\r\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n      Author: Pixinvent\r\n    Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n\r\n<template>\r\n    <div id=\"email-app\" class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\">\r\n\r\n        <vs-sidebar class=\"items-no-padding\" parent=\"#email-app\" :click-not-close=\"clickNotClose\" :hidden-background=\"clickNotClose\" v-model=\"isEmailSidebarActive\">\r\n            <email-sidebar :emailTags=\"emailTags\" @closeSidebar=\"toggleEmailSidebar\" :mailFilter=\"mailFilter\" />\r\n        </vs-sidebar>\r\n\r\n        <div :class=\"{'sidebar-spacer': clickNotClose}\" class=\"no-scroll-content border border-solid d-theme-border-grey-light border-r-0 border-t-0 border-b-0\">\r\n\r\n            <!-- SEARCH BAR -->\r\n            <div class=\"flex border d-theme-dark-bg items-center\">\r\n                <feather-icon class=\"md:inline-flex lg:hidden ml-4 mr-4 cursor-pointer\" icon=\"MenuIcon\" @click.stop=\"toggleEmailSidebar(true)\"/>\r\n                <vs-input icon-no-border icon=\"icon-search\" size=\"large\" icon-pack=\"feather\" placeholder=\"Search Mail\" v-model=\"searchQuery\" class=\"vs-input-no-border vs-input-no-shdow-focus w-full\" />\r\n            </div>\r\n\r\n            <!-- EMAIL ACTION BAR -->\r\n            <div class=\"email__actions flex items-center flex-wrap justify-between p-4 border border-r-0 border-l-0 border-solid d-theme-border-grey-light\">\r\n                <div class=\"flex items-center\">\r\n                    <vs-checkbox v-model=\"selectAllCheckBox\" icon-pack=\"feather\" :icon=\"selectAllIcon\" class=\"select-all-chexkbox ml-0\">Select All</vs-checkbox>\r\n                </div>\r\n                <div class=\"flex\">\r\n\r\n                    <vs-dropdown vs-custom-content vs-trigger-click class=\"cursor-pointer\" v-if=\"mailFilter != 'sent'\">\r\n\r\n                        <feather-icon icon=\"FolderIcon\" class=\"cursor-pointer\" svg-classes=\"h-6 w-6\"></feather-icon>\r\n\r\n                        <vs-dropdown-menu>\r\n                            <vs-dropdown-item @click=\"moveTo('inbox')\" v-if=\"mailFilter != 'inbox'\">\r\n                              <span class=\"flex items-center\">\r\n                                <feather-icon icon=\"MailIcon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\r\n                                <span>Inbox</span>\r\n                              </span>\r\n                            </vs-dropdown-item>\r\n\r\n                            <vs-dropdown-item @click=\"moveTo('draft')\" v-if=\"mailFilter != 'draft'\">\r\n                              <span class=\"flex items-center\">\r\n                                <feather-icon icon=\"Edit2Icon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\r\n                                <span>Draft</span>\r\n                              </span>\r\n                            </vs-dropdown-item>\r\n\r\n                            <vs-dropdown-item @click=\"moveTo('spam')\" v-if=\"mailFilter != 'spam'\">\r\n                              <span class=\"flex items-center\">\r\n                                <feather-icon icon=\"InfoIcon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\r\n                                <span>Spam</span>\r\n                              </span>\r\n                            </vs-dropdown-item>\r\n\r\n                            <vs-dropdown-item @click=\"moveTo('trash')\" v-if=\"mailFilter != 'trash'\">\r\n                              <span class=\"flex items-center\">\r\n                                <feather-icon icon=\"TrashIcon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\r\n                                <span>Trash</span>\r\n                              </span>\r\n                            </vs-dropdown-item>\r\n                        </vs-dropdown-menu>\r\n                    </vs-dropdown>\r\n\r\n                    <vs-dropdown vs-custom-content vs-trigger-click class=\"cursor-pointer\">\r\n\r\n                        <feather-icon icon=\"TagIcon\" class=\"cursor-pointer ml-5\" svg-classes=\"h-6 w-6\"></feather-icon>\r\n\r\n                        <vs-dropdown-menu >\r\n                          <vs-dropdown-item v-for=\"(label, index) in emailTags\" :key=\"index\" @click=\"updateLabels(label.value)\" class=\"whitespace-no-wrap\">\r\n                            <div class=\"h-3 w-3 inline-block rounded-full mr-3\" :class=\"'bg-' + label.color\"></div>\r\n                            <span>{{ label.text }}</span>\r\n                          </vs-dropdown-item>\r\n                        </vs-dropdown-menu>\r\n                    </vs-dropdown>\r\n\r\n                    <feather-icon icon=\"MailIcon\" class=\"ml-5 cursor-pointer\" svg-classes=\"h-6 w-6\" @click=\"updateMarkUnread\" />\r\n\r\n                    <feather-icon v-if=\"mailFilter != 'trash'\" icon=\"TrashIcon\" class=\"cursor-pointer ml-5\" svg-classes=\"h-6 w-6\" @click=\"moveTo('trash')\" />\r\n                </div>\r\n            </div>\r\n\r\n            <!-- EMAILS LIST -->\r\n            <component :is=\"scrollbarTag\" class=\"email-content-scroll-area\" :settings=\"settings\" ref=\"mailListPS\" :key=\"$vs.rtl\">\r\n                <transition-group name=\"list-enter-up\" class=\"email__mails\" tag=\"ul\" appear>\r\n                    <li class=\"cursor-pointer email__mail-item\" v-for=\"(mail, index) in mails\" :key=\"String(mailFilter) + String(mail.id)\" @click=\"updateOpenMail(mail.id)\" :style=\"{transitionDelay: (index * 0.1) + 's'}\">\r\n                        <mail-item :mail=\"mail\" :isSelected=\"isMailSelected(mail.id)\" @addToSelected=\"addToSelectedMails\" @removeSelected=\"removeSelectedMail\" />\r\n                    </li>\r\n                </transition-group>\r\n            </component>\r\n        </div>\r\n\r\n        <!-- EMAIL VIEW SIDEBAR -->\r\n        <email-view\r\n            :emailTags       = \"emailTags\"\r\n            :openMailId      = \"openMailId\"\r\n            :isSidebarActive = \"isSidebarActive\"\r\n            :mailFilter      = \"mailFilter\"\r\n            @markUnread      = \"updateSingleMarkUnread\"\r\n            @removeMail      = \"removeOpenMail\"\r\n            @previousMail    = \"previousMail\"\r\n            @nextMail        = \"nextMail\"\r\n            @moveTo          = \"moveCurrentTo\"\r\n            @closeSidebar    = \"closeMailViewSidebar\">\r\n        </email-view>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport EmailSidebar        from './EmailSidebar.vue'\r\nimport MailItem            from './MailItem.vue'\r\nimport EmailView           from './EmailView.vue'\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport moduleEmail         from '@/store/email/moduleEmail.js'\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      openMailId           : null,\r\n      selectedMails        : [],\r\n      isSidebarActive      : false,\r\n      showThread           : false,\r\n      clickNotClose        : true,\r\n      isEmailSidebarActive : true,\r\n      settings             : {\r\n        maxScrollbarLength : 60,\r\n        wheelSpeed         : 0.30\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    isSidebarActive (value) {\r\n      if (!value) this.showThread = false\r\n    },\r\n    mailFilter () {\r\n      this.selectedMails = []\r\n\r\n      const scroll_el = this.$refs.mailListPS.$el || this.$refs.mailListPS\r\n      scroll_el.scrollTop = 0\r\n\r\n      this.$store.commit('email/UPDATE_MAIL_FILTER', this.$route.params.filter)\r\n      this.$store.dispatch('email/fetchEmails', { filter: this.$route.params.filter })\r\n      this.toggleEmailSidebar()\r\n    },\r\n    windowWidth () {\r\n      this.setSidebarWidth()\r\n    }\r\n  },\r\n  computed: {\r\n    mailFilter () {\r\n      return this.$route.params.filter\r\n    },\r\n    emailTags () {\r\n      return this.$store.state.email.mailTags\r\n    },\r\n    searchQuery: {\r\n      get () {\r\n        return this.$store.state.email.mailSearchQuery\r\n      },\r\n      set (val) {\r\n        this.$store.dispatch('email/setEmailSearchQuery', val)\r\n      }\r\n    },\r\n    selectAllCheckBox: {\r\n      get () {\r\n        return this.selectedMails.length\r\n      },\r\n      set (value) {\r\n        value ? this.selectedMails = this.mails.map(mail => mail.id) : this.selectedMails = []\r\n      }\r\n    },\r\n    mails () {\r\n      return this.$store.getters['email/filteredMails']\r\n    },\r\n    selectAllIcon () {\r\n      return this.selectedMails.length === this.mails.length ? 'icon-check' : 'icon-minus'\r\n    },\r\n    scrollbarTag () { return this.$store.getters.scrollbarTag },\r\n    isMailSelected () {\r\n      return (mailId) => this.selectedMails.indexOf(mailId) !== -1\r\n    },\r\n    windowWidth () {\r\n      return this.$store.state.windowWidth\r\n    }\r\n  },\r\n  methods: {\r\n    updateOpenMail (mailId) {\r\n      this.openMailId = mailId\r\n      this.isSidebarActive = true\r\n    },\r\n    addToSelectedMails (mailId) {\r\n      if (this.selectedMails.indexOf(mailId) === -1) this.selectedMails.push(mailId)\r\n    },\r\n    removeSelectedMail (mailId) {\r\n      const mailIndex = this.selectedMails.indexOf(mailId)\r\n      if (mailIndex !== -1) this.selectedMails.splice(mailIndex, 1)\r\n    },\r\n    moveTo (to) {\r\n      const payload = { emailIds: this.selectedMails, to }\r\n      this.$store.dispatch('email/moveMailsTo', payload)\r\n        .catch((error) => { console.error(error) })\r\n      this.selectedMails = []\r\n    },\r\n    moveCurrentTo (to) {\r\n      this.selectedMails = [this.openMailId]\r\n      this.moveTo(to)\r\n    },\r\n    updateMarkUnread () {\r\n      const payload = { emailIds: this.selectedMails, unreadFlag: true }\r\n      this.$store.dispatch('email/setUnread', payload)\r\n      this.selectedMails = []\r\n    },\r\n    removeOpenMail () {\r\n      this.selectedMails = [this.openMailId]\r\n      this.moveTo('trashed')\r\n      this.isSidebarActive = false\r\n    },\r\n    toggleIsStarred () {\r\n      const payload = { mailId: this.currentMail.id, value: !this.currentMail.isStarred }\r\n      this.$store.dispatch('email/toggleIsMailStarred', payload)\r\n    },\r\n    nextMail () {\r\n      const currentMailIndex = this.mails.findIndex((mail) => mail.id === this.openMailId)\r\n      if (this.mails[currentMailIndex + 1]) this.openMailId = this.mails[currentMailIndex + 1].id\r\n    },\r\n    previousMail () {\r\n      const currentMailIndex = this.mails.findIndex((mail) => mail.id === this.openMailId)\r\n      if (this.mails[currentMailIndex - 1]) this.openMailId = this.mails[currentMailIndex - 1].id\r\n    },\r\n    updateSingleMarkUnread () {\r\n      this.selectedMails = [this.openMailId]\r\n      this.updateMarkUnread()\r\n      this.isSidebarActive = false\r\n    },\r\n    updateLabels (label) {\r\n      this.$store.dispatch('email/updateLabels', { mails: this.selectedMails, label })\r\n      this.selectedMails = []\r\n    },\r\n    closeMailViewSidebar () {\r\n      this.isSidebarActive = false\r\n    },\r\n    setSidebarWidth () {\r\n      if (this.windowWidth < 992) {\r\n        this.isEmailSidebarActive = this.clickNotClose = false\r\n      } else {\r\n        this.isEmailSidebarActive = this.clickNotClose = true\r\n      }\r\n    },\r\n    toggleEmailSidebar (value = false) {\r\n      if (!value) {\r\n        this.closeMailViewSidebar()\r\n        if (this.clickNotClose) {\r\n          return\r\n        }\r\n      }\r\n      this.isEmailSidebarActive = value\r\n    }\r\n  },\r\n  components: {\r\n    MailItem,\r\n    EmailSidebar,\r\n    EmailView,\r\n    VuePerfectScrollbar\r\n  },\r\n  created () {\r\n    this.$store.registerModule('email', moduleEmail)\r\n    this.setSidebarWidth()\r\n\r\n    this.$store.commit('email/UPDATE_MAIL_FILTER', this.$route.params.filter)        // Update Mail Filter\r\n    this.$store.dispatch('email/fetchEmails', { filter: this.$route.params.filter }) // Fetch Emails From API\r\n    this.$store.dispatch('email/fetchMeta')                                          // Fetch Unread Mails\r\n    this.$store.dispatch('email/fetchTags')                                          // Fetch Mail Tags\r\n  },\r\n  beforeDestroy () {\r\n    this.$store.unregisterModule('email')\r\n  },\r\n  mounted () {\r\n    this.$store.dispatch('email/setEmailSearchQuery', '')\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuexy/apps/email.scss\";\r\n</style>\r\n"]}]}