{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\fake-db\\data\\user\\index.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\src\\fake-db\\data\\user\\index.js","mtime":1620826038000},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\babel.config.js","mtime":1620826038000},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664268236462},{"path":"C:\\Users\\Administrator\\Desktop\\验收文件0516\\后台前端\\node_modules\\babel-loader\\lib\\index.js","mtime":1663908471338}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport mock from '@/fake-db/mock.js';\nimport jwt from 'jsonwebtoken';\nvar data = {\n  checkpointReward: {\n    userName: 'John',\n    progress: '57.6%'\n  },\n  users: [{\n    uid: 34,\n    displayName: 'Howard Potts',\n    password: 'adminadmin',\n    photoURL: require('@/assets/images/portrait/small/avatar-s-5.jpg'),\n    email: 'admin@admin.com',\n    phoneNumber: null\n  }]\n};\nvar jwtConfig = {\n  'secret': 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  'expireTime': 8000\n};\nmock.onPost('/api/auth/login').reply(function (request) {\n  var _JSON$parse = JSON.parse(request.data),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password;\n\n  var error = 'Something went wrong';\n  var user = data.users.find(function (user) {\n    return user.email === email && user.password === password;\n  });\n\n  if (user) {\n    try {\n      var accessToken = jwt.sign({\n        id: user.uid\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      var userData = Object.assign({}, user, {\n        providerId: 'jwt'\n      });\n      delete userData.password;\n      var response = {\n        userData: userData,\n        accessToken: accessToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = 'Email Or Password Invalid';\n  }\n\n  return [200, {\n    error: error\n  }];\n});\nmock.onPost('/api/auth/register').reply(function (request) {\n  var _JSON$parse2 = JSON.parse(request.data),\n      displayName = _JSON$parse2.displayName,\n      email = _JSON$parse2.email,\n      password = _JSON$parse2.password;\n\n  var isEmailAlreadyInUse = data.users.find(function (user) {\n    return user.email === email;\n  });\n  var error = {\n    email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n    displayName: displayName === '' ? 'Please enter your name.' : null\n  };\n\n  if (!error.displayName && !error.email) {\n    var userData = {\n      email: email,\n      password: password,\n      displayName: displayName,\n      photoURL: require('@/assets/images/portrait/small/avatar-s-5.jpg'),\n      phoneNumber: null\n    }; // Add user id\n\n    var length = data.users.length;\n    var lastIndex = 0;\n\n    if (length) {\n      lastIndex = data.users[length - 1].uid;\n    }\n\n    userData.uid = lastIndex + 1;\n    data.users.push(userData);\n    var accessToken = jwt.sign({\n      id: userData.uid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expireTime\n    });\n    var user = Object.assign({}, userData);\n    delete user['password'];\n    var response = {\n      userData: user,\n      accessToken: accessToken\n    };\n    return [200, response];\n  } else {\n    return [200, {\n      error: error\n    }];\n  }\n});\nmock.onPost('/api/auth/refresh-token').reply(function (request) {\n  var _JSON$parse3 = JSON.parse(request.data),\n      accessToken = _JSON$parse3.accessToken;\n\n  try {\n    var _jwt$verify = jwt.verify(accessToken, jwtConfig.secret),\n        id = _jwt$verify.id;\n\n    var userData = Object.assign({}, data.users.find(function (user) {\n      return user.uid === id;\n    }));\n    var newAccessToken = jwt.sign({\n      id: userData.uid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    delete userData['password'];\n    var response = {\n      userData: userData,\n      accessToken: newAccessToken\n    };\n    return [200, response];\n  } catch (e) {\n    var error = 'Invalid access token';\n    return [401, {\n      error: error\n    }];\n  }\n});\nmock.onGet('/api/user/checkpoint-reward').reply(function () {\n  return [200, data.checkpointReward];\n});",{"version":3,"names":["mock","jwt","data","checkpointReward","userName","progress","users","uid","displayName","password","photoURL","require","email","phoneNumber","jwtConfig","onPost","reply","request","JSON","parse","error","user","find","accessToken","sign","id","secret","expiresIn","expireTime","userData","Object","assign","providerId","response","e","isEmailAlreadyInUse","length","lastIndex","push","verify","newAccessToken","onGet"],"sources":["C:/Users/Administrator/Desktop/验收文件0516/后台前端/src/fake-db/data/user/index.js"],"sourcesContent":["import mock from '@/fake-db/mock.js'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconst data = {\r\n  checkpointReward: {\r\n    userName: 'John',\r\n    progress: '57.6%'\r\n  },\r\n  users: [\r\n    {\r\n      uid: 34,\r\n      displayName: 'Howard Potts',\r\n      password: 'adminadmin',\r\n      photoURL: require('@/assets/images/portrait/small/avatar-s-5.jpg'),\r\n      email: 'admin@admin.com',\r\n      phoneNumber: null\r\n    }\r\n  ]\r\n}\r\n\r\n\r\nconst jwtConfig = {\r\n  'secret'   : 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\r\n  'expireTime': 8000\r\n}\r\n\r\n\r\nmock.onPost('/api/auth/login').reply((request) => {\r\n  const {email, password} = JSON.parse(request.data)\r\n\r\n  let error = 'Something went wrong'\r\n\r\n  const user = data.users.find(user => user.email === email && user.password === password)\r\n\r\n  if (user) {\r\n\r\n    try {\r\n\r\n      const accessToken = jwt.sign({id: user.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\r\n\r\n      const userData = Object.assign({}, user, {providerId: 'jwt'})\r\n\r\n      delete userData.password\r\n\r\n      const response = {\r\n        userData,\r\n        accessToken\r\n      }\r\n\r\n      return [200, response]\r\n\r\n    } catch (e) {\r\n      error = e\r\n    }\r\n  } else {\r\n    error = 'Email Or Password Invalid'\r\n  }\r\n\r\n  return [200, {error}]\r\n\r\n\r\n})\r\n\r\nmock.onPost('/api/auth/register').reply((request) => {\r\n  const {displayName, email, password} = JSON.parse(request.data)\r\n  const isEmailAlreadyInUse = data.users.find((user) => user.email === email)\r\n  const error = {\r\n    email      : isEmailAlreadyInUse ? 'This email is already in use.' : null,\r\n    displayName: displayName === '' ? 'Please enter your name.' : null\r\n  }\r\n\r\n  if (!error.displayName && !error.email) {\r\n\r\n    const userData = {\r\n      email,\r\n      password,\r\n      displayName,\r\n      photoURL: require('@/assets/images/portrait/small/avatar-s-5.jpg'),\r\n      phoneNumber: null\r\n    }\r\n\r\n    // Add user id\r\n    const length = data.users.length\r\n    let lastIndex = 0\r\n    if (length) {\r\n      lastIndex = data.users[length - 1].uid\r\n    }\r\n    userData.uid = lastIndex + 1\r\n\r\n    data.users.push(userData)\r\n\r\n    const accessToken = jwt.sign({id: userData.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\r\n\r\n    const user = Object.assign({}, userData)\r\n    delete user['password']\r\n    const response = {\r\n      userData: user,\r\n      accessToken\r\n    }\r\n\r\n    return [200, response]\r\n  } else {\r\n    return [200, {error}]\r\n  }\r\n})\r\n\r\n\r\nmock.onPost('/api/auth/refresh-token').reply((request) => {\r\n\r\n  const {accessToken} = JSON.parse(request.data)\r\n\r\n  try {\r\n    const {id} = jwt.verify(accessToken, jwtConfig.secret)\r\n\r\n    const userData = Object.assign({}, data.users.find(user => user.uid === id))\r\n\r\n    const newAccessToken = jwt.sign({id: userData.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn})\r\n\r\n    delete userData['password']\r\n    const response = {\r\n      userData,\r\n      accessToken: newAccessToken\r\n    }\r\n\r\n    return [200, response]\r\n  } catch (e) {\r\n    const error = 'Invalid access token'\r\n    return [401, {error}]\r\n  }\r\n})\r\n\r\n\r\nmock.onGet('/api/user/checkpoint-reward').reply(() => {\r\n  return [200, data.checkpointReward]\r\n})\r\n"],"mappings":"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"}]}